// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealTaskManager.Infrastructure.Data;

#nullable disable

namespace RealTaskManager.Infrastructure.Data.Migrations.TaskManager
{
    [DbContext(typeof(RealTaskManagerDbContext))]
    [Migration("20250707140753_UserEntityUpdate")]
    partial class UserEntityUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealTaskManager.Core.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.TasksAssignedToUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TasksAssignedToUsers");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.TasksCreatedByUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TasksCreatedByUsers");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.TasksAssignedToUser", b =>
                {
                    b.HasOne("RealTaskManager.Core.Entities.TaskEntity", "Task")
                        .WithMany("TasksAssignedToUser")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealTaskManager.Core.Entities.UserEntity", "User")
                        .WithMany("TasksAssignedToUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.TasksCreatedByUser", b =>
                {
                    b.HasOne("RealTaskManager.Core.Entities.TaskEntity", "Task")
                        .WithMany("TasksCreatedByUser")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealTaskManager.Core.Entities.UserEntity", "User")
                        .WithMany("TasksCreatedByUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.TaskEntity", b =>
                {
                    b.Navigation("TasksAssignedToUser");

                    b.Navigation("TasksCreatedByUser");
                });

            modelBuilder.Entity("RealTaskManager.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("TasksAssignedToUser");

                    b.Navigation("TasksCreatedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
